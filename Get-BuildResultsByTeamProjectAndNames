function Get-HelloWorld {   
    param([string]$tfsServerUrl,
          [PSObject[]]$BuildList)
   
    [void][System.Reflection.Assembly]::LoadWithPartialName("Microsoft.TeamFoundation.Client")
    [void][System.Reflection.Assembly]::LoadWithPartialName("Microsoft.TeamFoundation.Build.Client")
    [void][System.Reflection.Assembly]::LoadWithPartialName("Microsoft.TeamFoundation.Build.Common")
    [void][System.Reflection.Assembly]::LoadWithPartialName("Microsoft.TeamFoundation.VersionControl.Client")
    $Tfs = [Microsoft.TeamFoundation.Client.TeamFoundationServerFactory]::GetServer($tfsServerUrl)
    $VersionControlServer = $Tfs.GetService("Microsoft.TeamFoundation.VersionControl.Client.VersionControlServer")
    $BuildControlServer = $Tfs.GetService("Microsoft.TeamFoundation.Build.Client.IBuildServer")
 
 
    foreach ($build in $BuildList){
        $TeamProject= $build.TeamProject
 
        foreach( $buildDefinitionName in $build.BuildNames){
        $spec=$BuildControlServer.CreateBuildDetailSpec($TeamProject,$BuildDefinitionName)
        $spec.InformationTypes=$null
   
        $MatchingBuilds = $BuildControlServer.QueryBuilds($Spec)
        $Build =($MatchingBuilds.Builds) |where-object {$_.Status -in "Succeeded", "Failed", "PartiallySucceeded"}| Sort-Object  FinishTime -Descending | Select-Object -first 1
        if($build -ne $null){
            $errorMessage=""   
            if (!($Build.status -eq "Succeeded")){
                $errorMessage= [Microsoft.TeamFoundation.Build.Client.InformationNodeConverters]::GetBuildErrors($BuildControlServer.GetAllBuildDetails($Build.Uri)).Message
                if($build.TestStatus -eq "Failed"){
                #Todo:link the trx files...or add testmanager's testrun results...
                $errorMessage="Tests failed. Check the test results "
                }   
            }
            $obj=@()
            $obj = new-object psobject -Property @{
            TeamProject=$TeamProject
            Name =$Build.BuildDefinition.Name
            BuildNumber=$Build.BuildNumber
            Status=$Build.Status
            FinishTime=$Build.FinishTime
            ErrorMessage=$ErrorMessage.Trim()
            }
            $global:objects+=$obj
        }
 
      }
    }
}
 
 
[PSObject[]]$global:objects= @()
 
$fileName= Join-Path -Path "c:\temp\" ((get-date -format "yyMMddhhmmss") + ".txt")
[PSObject[]]$BuildList=@()
 
$build=New-Object psobject -Property @{
TeamProject="tp1"
BuildNames=@("b1", "b2", "b3", "b4", "b5")}
$BuildList+=$build

$build=New-Object psobject -Property @{
TeamProject="tp2"
BuildNames=@("b1", "b2","b3" )
}
$BuildList+=$build
 
$build=New-Object psobject -Property @{
TeamProject="tp3"
BuildNames=@("b1", "b2","b3", "b4" )
}
$BuildList+=$build

$tfsServerUrl= "http://tfs:8080/tfs/DefaultCollection"

Get-HelloWorld $tfsServerUrl $BuildList
 
$Global:objects | Format-Table TeamProject, Name, BuildNumber, Status, FinishTime, ErrorMessage >>$fileName
 
notepad $fileName
